if (oracle == TRUE){
min_mu = min(abs(true_mu[1]),abs(true_mu[2]))
max_mu = max(abs(true_mu[1]),abs(true_mu[2]))
if (max_mu == abs(true_mu[2])){est = c(0, true_mu[2])} else {est = c(true_mu[1], 0)}
}else if (max_val == abs(x2)){
est = c(0, x2)
} else {est = c(x1, 0)}
if (est[1] >= 0){
mix_comp_1 = (-pnorm(min_val,est[1],1,T)+pnorm(max_val,est[1],1,T) +
pnorm(-min_val,est[1],1,T)-pnorm(-max_val,est[1],1,T))/(pnorm(max_val,est[1],1, T)-pnorm(-max_val,est[1],1, T))
mw_1 = (dnorm(max_val,est[2], 1) +  dnorm(-max_val, est[2], 1))*(pnorm(max_val-est[1]) - pnorm(-max_val-est[1]))
}
else if (est[1] < 0){
mix_comp_1 =  (pnorm(min_val,est[1],1,F)-pnorm(max_val,est[1],1,F) -
pnorm(-min_val,est[1],1,F)+pnorm(-max_val,est[1],1,F))/(-pnorm(max_val,est[1],1,F)+pnorm(-max_val,est[1],1, F))
mw_1 = (dnorm(max_val,est[2], 1) +  dnorm(-max_val, est[2], 1))*(-pnorm(max_val-est[1], 0, 1, F) + pnorm(-max_val-est[1], 0, 1, F))
}
if (est[2] >= 0){
mix_comp_2 = (-pnorm(min_val,est[2],1,T)+pnorm(max_val,est[2],1,T) +
pnorm(-min_val,est[2],1,T)-pnorm(-max_val,est[2],1,T))/(pnorm(max_val,est[2],1, T)-pnorm(-max_val,est[2],1, T))
mw_2 = (dnorm(max_val,est[1], 1) +  dnorm(-max_val, est[1], 1))*(pnorm(max_val-est[2], 0, 1, T) - pnorm(-max_val-est[2], 0, 1, T))
}
else if (est[2] < 0){
mix_comp_2 =  (pnorm(min_val,est[2],1,F)-pnorm(max_val,est[2],1,F) -
pnorm(-min_val,est[2],1,F)+pnorm(-max_val,est[2],1,F))/(-pnorm(max_val,est[2],1,F)+pnorm(-max_val,est[2],1, F))
mw_2 = (dnorm(max_val,est[1], 1) +  dnorm(-max_val, est[1], 1))*(-pnorm(max_val-est[2], 0, 1, F) + pnorm(-max_val-est[2], 0, 1, F))
}
Ps = mw_2 + mw_1
pval = mix_comp_2 * (mw_2/Ps) +mix_comp_1 * (mw_1/Ps)
return(pval)
}
generate_XX = function(x, case_config, M, mus){
num_cases = (case_config * M)
mus_mat =  matrix(c(c(0, 0), c(mus[1], 0), c(0, mus[2]), mus), nrow = 4, byrow = TRUE)
generate_data_reps = function(i){
if (num_cases[i] > 0){
return (matrix(rnorm(2*num_cases[i], mean = mus_mat[i,], 1), nrow = num_cases[i], byrow = TRUE))
}
}
#use lapply to generate num_cases[i] number of draws for each case
XX = lapply(seq(1, 4, 1), generate_data_reps)
#rbind together all results
XX = do.call(rbind, XX)
null_bool = rep(c(T, T, T, F), num_cases)
XX = cbind(null_bool, XX)
return (XX)
}
get_rejections = function(XX, alpha){
null_bool = as.logical(XX[,1])
XX_pvals = 2*(pnorm(-abs(as.matrix(XX[, c(2, 3)]))))
dact_pvals = DACT(p_a=XX_pvals[,1], p_b=XX_pvals[, 2], correction = "JC")
dact_bh = p.adjust(dact_pvals, method ='BH')
ada_decisions = adaFilter(XX_pvals, r = 2, alpha = alpha)$decision
alphas= null_estimation(XX_pvals, lambda = 0.5)
alpha00 = alphas$alpha00
alpha01 = alphas$alpha01
alpha10 = alphas$alpha10
alpha1 =  alphas$alpha1
alpha2 =  alphas$alpha2
hdmt_loc = fdr_est(alpha00, alpha01, alpha10, alpha1, alpha2, XX_pvals, exact = 1)
cpch_pvals = apply(XX[,c(2, 3)], 1, calc_cpch_pvals)
cpch_bh = p.adjust(cpch_pvals, method = 'BH')
#maxp with BH
maxp_decisions = ClassicalMTP(XX_pvals, r = 2, alpha = alpha, method = "Bonferroni")$decision
##### FDR and Power Calculations #####
cpch_bh_fdr = sum(cpch_bh[null_bool] <= alpha, na.rm = TRUE)/max(1, sum(cpch_bh <= alpha, na.rm = TRUE))
dact_fdr = sum(dact_bh[null_bool] <= alpha, na.rm = TRUE)/max(1, sum(dact_bh <= alpha, na.rm = TRUE))
hdmt_fdr = sum(hdmt_loc[null_bool] <= alpha)/max(1, sum(hdmt_loc <= alpha))
ada_fdr = sum(ada_decisions[null_bool])/max(1, sum(ada_decisions))
maxp_fdr = sum(maxp_decisions[null_bool])/max(1, sum(maxp_decisions))
if (sum(null_bool) < length(null_bool)){
cpch_bh_power = mean(cpch_bh[!null_bool] <= alpha)
dact_power = mean(dact_bh[!null_bool] <= alpha)
hdmt_power = mean(hdmt_loc[!null_bool] <= alpha)
ada_power = mean(ada_decisions[!null_bool])
maxp_power = mean(maxp_decisions[!null_bool])
return (list(cpch_bh_fdr,
ada_fdr,
dact_fdr,
hdmt_fdr,
maxp_fdr, cpch_bh_power,
ada_power, dact_power, hdmt_power, maxp_power
))
}
else{return (list(cpch_bh_fdr,
ada_fdr, dact_fdr, hdmt_fdr, maxp_fdr))
}
}
calc_null_cases = function(case, M, mus, alpha, power_iters){
print(case)
XX_list =lapply(seq(1, power_iters, 1), generate_XX, case, M, mus)
dh =sapply(XX_list, get_rejections, alpha)
power_mat = t(as.matrix(dh))
pm = matrix(unlist(power_mat), nrow = power_iters,  byrow = FALSE)
fdr = colMeans(pm, na.rm = TRUE)
fdr_ses = apply(pm, 2, sd, na.rm = FALSE)/(power_iters ** 0.5)
print(cat(
paste('cPCH-BH & ',
toString(round(fdr[1], digits = 6)),
' \\\\ \n & adaFilter  &',
toString(round(fdr[2], digits = 6)),
' \\\\ \n & DACT & ',
toString(round(fdr[3], digits = 6)),
' \\\\ \n & HDMT & ',
toString(round(fdr[4], digits = 6)),
' \\\\ \n & MaxP-BH & ',
toString(round(fdr[5], digits = 6)),
"\\\\")
)
)
return (list(fdr, fdr_ses))
}
#####################
##### Alt Cases #####
#####################
calc_cases = function(case, M, mus, alpha, power_iters){
print(case)
XX_list =lapply(seq(1, power_iters, 1), generate_XX, case, M, mus)
dh =sapply(XX_list, get_rejections, alpha)
power_mat = t(as.matrix(dh))
pm = matrix(unlist(power_mat), nrow = power_iters,  byrow = FALSE)
t1_power = colMeans(pm, na.rm = TRUE)
t1_power_ses = apply(pm, 2, sd, na.rm = FALSE)/(power_iters ** 0.5)
print(cat(paste('cPCH-BH & ',
toString(round(t1_power[1], digits = 4)), ' & ',
toString(round(t1_power[6], digits = 4)),
'\\\\ \n & adaFilter  & ',
toString(round(t1_power[2], digits = 4)), ' & ',
toString(round(t1_power[7], digits = 4)),
'\\\\ \n & DACT  & ',
toString(round(t1_power[3], digits = 4)), ' & ',
toString(round(t1_power[8], digits = 4)),
'\\\\ \n & HDMT  & ',
toString(round(t1_power[4], digits = 4)), ' & ',
toString(round(t1_power[9], digits = 4)),
'\\\\ \n & MaxP-BH  & ',
toString(round(t1_power[5], digits = 4)), ' & ',
toString(round(t1_power[10], digits = 4)),
'\\\\')))
return (list(t1_power, t1_power_ses))
}
print(M)
alpha = 0.1
power_iters = 1000
alt_res = lapply(alt_cases, calc_cases, M, c(mag, mag), alpha, power_iters)
View(alt_res)
alt_res[[2]][[2]]
alt_res[[1]][[2]]
null_res = lapply(null_cases, calc_null_cases, M, c(mag, mag), alpha, power_iters)
View(null_res_1000)
View(null_res)
save(null_res, alt_res, file = paste0("eb_appendix_",M,".rda"))
library(ggplot2)
library(dplyr)
library(readr)
setwd("~/Documents/Research/minmax/cpch/validity")
#data used to reproduce the plots in the Approximate Validity section of the paper
combined = read.csv('Data/combined_data_m_3_r_3.csv')
#KS plots
ks_unifs = sapply(seq(1, 10000, 1), function(i){
1-ks.test(runif(10000), runif)[[1]]
}
)
ks_3_2 = read.csv('Data/ks_df_m_3_r_2.csv')
ks_2_2 = read.csv('Data/ks_df_m_2_r_2.csv')
methods22 = c(rep('Fisher', nrow(ks_2_2)), rep('Simes', nrow(ks_2_2)), rep('Bonferroni', nrow(ks_2_2)))
methods32 = c(rep('Fisher', nrow(ks_3_2)), rep('Simes', nrow(ks_3_2)), rep('Bonferroni', nrow(ks_3_2)))
ks22 = c(ks_2_2$ks_f,  ks_2_2$ks_s, ks_2_2$ks_b)
ks32 = c(ks_3_2$ks_f,  ks_3_2$ks_s, ks_3_2$ks_b)
ks_df = data.frame(config = c(rep('m = 2, r = 2', length(ks22)), rep('m = 3, r = 2', length(ks32))),
Method = c(methods22, methods32),
nonzero_mu = rep(seq(0, 4, 0.2), 2),
ks = c(ks22, ks32)
)
ks_plot = ggplot(ks_df, aes(x = nonzero_mu, y = ks, color = Method)) +
geom_line(size = 1) + ylim(c(0, max(0.2))) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
geom_hline(aes(yintercept = mean(ks_unifs)), linetype = 2, color = 'red') +
# geom_hline(aes(yintercept = mean(ks_unifs), linetype = 'Avg K-S Distance \n between 10000 Independent Samples \n from Unif[0, 1]'), color = 'red') +
theme(legend.key.height=unit(2, "cm")) +
facet_wrap(~ config, ncol = 2) +
scale_linetype_manual(name = "", values = c(2, 2), guide = guide_legend(label = TRUE)) +
xlab(expression(theta[(m)])) + ylab('K-S Distance') + labs(color = expression(paste('Combining \n Function'))) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 22),
axis.title =element_text(size= 22), axis.text = element_text(size = 21),
legend.title=element_text(size = 21), legend.text=element_text(size=20),
panel.border = element_blank())
#Set directory to where you want plots to be saved
ggsave(filename = "cpch_ks_plot_all.png",
plot = ks_plot, path = 'Plots', bg = 'white',
height = 7, width = 14)
ks_plot = ggplot(ks_df, aes(x = nonzero_mu, y = ks, color = Method)) +
geom_line(size = 1) + ylim(c(0, max(0.2))) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
geom_hline(aes(yintercept = mean(ks_unifs)), linetype = 2, color = 'red') +
# geom_hline(aes(yintercept = mean(ks_unifs), linetype = 'Avg K-S Distance \n between 10000 Independent Samples \n from Unif[0, 1]'), color = 'red') +
theme(legend.key.height=unit(2, "cm")) +
facet_wrap(~ config, ncol = 2) +
scale_linetype_manual(name = "", values = c(2, 2), guide = guide_legend(label = TRUE)) +
xlab(expression(theta[(m)])) + ylab('K-S Distance') + labs(color = expression(paste('Combining \n Function'))) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 22),
axis.title =element_text(size= 23), axis.text = element_text(size = 21),
legend.title=element_text(size = 21), legend.text=element_text(size=20),
panel.border = element_blank())
#Set directory to where you want plots to be saved
ggsave(filename = "cpch_ks_plot_all.png",
plot = ks_plot, path = 'Plots', bg = 'white',
height = 7, width = 14)
#make side-by-side facet plots
get_nonzero_mu = function(mu_vec){
substring = tail(strsplit(mu_vec, split = " ")[[1]], 1)
substr(substring, 1, nchar(substring)-1)
}
nonzero_mus = sapply(combined$mu, get_nonzero_mu)
combined$nonzero_mus = nonzero_mus
#qqplot m=3, r=2, m=r=2
qq_3_2 = combined[combined$m == 3 & combined$r == 2, ]
labelling = function(string){paste0('m = ', string, ', r = 2')}
qq_3_2$n_lab = sapply(qq_3_2 $m, labelling)
qq_2_2 = combined[combined$m == 2 & combined$r == 2, ]
qq_2_2$n_lab = 'r = m = 2'
test = data.frame('nonzero_mus'= c(qq_2_2$nonzero_mus, rep(qq_3_2$nonzero_mus, 3)),
'n_lab'= c(rep('r=m=2', nrow(qq_2_2)), rep(qq_3_2$n_lab, 3)),
'Combination'= c(rep('Bonferroni', nrow(qq_2_2)), rep('Fisher', nrow(qq_3_2)), rep('Simes', nrow(qq_3_2)), rep('Bonferroni', nrow(qq_3_2))),
'Quantiles'= c(qq_2_2$cpch_f, qq_3_2$cpch_f, qq_3_2$cpch_s, qq_3_2$cpch_b)
)
test$n_lab = factor(test$n_lab, levels = c('r = m = 2', 'm = 3, r = 2'))
alltogether = ggplot(test, aes(sample = Quantiles, color = nonzero_mus)) +
geom_qq(aes(color = nonzero_mus), size = 0.3, distribution = stats::qunif) +
facet_wrap(~ n_lab + Combination, nrow = 1) +
geom_abline(slope = 1, intercept = 0) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
guides(colour = guide_legend(override.aes = list(size=2))) +
labs('color' = expression(theta[(m)])) + xlab('Theoretical Unif[0, 1]') +
ylab('Empirical cPCH')+ scale_x_continuous(breaks=c(0,0.5,1)) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 35),
axis.title =element_text(size= 37), axis.text = element_text(size = 35),
legend.title=element_text(size = 40), legend.text=element_text(size=30),
panel.border = element_blank(), panel.spacing.x = unit(6, "mm"))
#Set directory to where you want plots to be saved
ggsave(filename = "cpch_qqplot_all.png",
plot = alltogether, path = 'Plots',
bg = 'white', height = 7, width = 24)
qq_2_2 = combined[combined$m == 2 & combined$r == 2, ]
qq_2_2$n_lab = 'r = m = 2'
test = data.frame('nonzero_mus'= c(qq_2_2$nonzero_mus, rep(qq_3_2$nonzero_mus, 3)),
'n_lab'= c(rep('r=m=2', nrow(qq_2_2)), rep(qq_3_2$n_lab, 3)),
'Combination'= c(rep('Bonferroni', nrow(qq_2_2)), rep('Fisher', nrow(qq_3_2)), rep('Simes', nrow(qq_3_2)), rep('Bonferroni', nrow(qq_3_2))),
'Quantiles'= c(qq_2_2$cpch_f, qq_3_2$cpch_f, qq_3_2$cpch_s, qq_3_2$cpch_b)
)
test$n_lab = factor(test$n_lab, levels = c('r = m = 2', 'm = 3, r = 2'))
test$Combination = factor(test$Combination, levels = c('Bonferroni', 'Simes', 'Fisher'))
alltogether = ggplot(test, aes(sample = Quantiles, color = nonzero_mus)) +
geom_qq(aes(color = nonzero_mus), size = 0.3, distribution = stats::qunif) +
facet_wrap(~ n_lab + Combination, nrow = 1) +
geom_abline(slope = 1, intercept = 0) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
guides(colour = guide_legend(override.aes = list(size=2))) +
labs('color' = expression(theta[(m)])) + xlab('Theoretical Unif[0, 1]') +
ylab('Empirical cPCH')+ scale_x_continuous(breaks=c(0,0.5,1)) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 35),
axis.title =element_text(size= 37), axis.text = element_text(size = 35),
legend.title=element_text(size = 40), legend.text=element_text(size=30),
panel.border = element_blank(), panel.spacing.x = unit(6, "mm"))
#Set directory to where you want plots to be saved
ggsave(filename = "cpch_qqplot_all.png",
plot = alltogether, path = 'Plots',
bg = 'white', height = 7, width = 24)
qq_2_2 = combined[combined$m == 2 & combined$r == 2, ]
qq_2_2$n_lab = 'r=m=2'
test = data.frame('nonzero_mus'= c(qq_2_2$nonzero_mus, rep(qq_3_2$nonzero_mus, 3)),
'n_lab'= c(rep('r = m = 2', nrow(qq_2_2)), rep(qq_3_2$n_lab, 3)),
'Combination'= c(rep('Bonferroni', nrow(qq_2_2)), rep('Fisher', nrow(qq_3_2)), rep('Simes', nrow(qq_3_2)), rep('Bonferroni', nrow(qq_3_2))),
'Quantiles'= c(qq_2_2$cpch_f, qq_3_2$cpch_f, qq_3_2$cpch_s, qq_3_2$cpch_b)
)
test$n_lab = factor(test$n_lab, levels = c('r = m = 2', 'm = 3, r = 2'))
test$Combination = factor(test$Combination, levels = c('Bonferroni', 'Simes', 'Fisher'))
alltogether = ggplot(test, aes(sample = Quantiles, color = nonzero_mus)) +
geom_qq(aes(color = nonzero_mus), size = 0.3, distribution = stats::qunif) +
facet_wrap(~ n_lab + Combination, nrow = 1) +
geom_abline(slope = 1, intercept = 0) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
guides(colour = guide_legend(override.aes = list(size=2))) +
labs('color' = expression(theta[(m)])) + xlab('Theoretical Unif[0, 1]') +
ylab('Empirical cPCH')+ scale_x_continuous(breaks=c(0,0.5,1)) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 35),
axis.title =element_text(size= 37), axis.text = element_text(size = 35),
legend.title=element_text(size = 40), legend.text=element_text(size=30),
panel.border = element_blank(), panel.spacing.x = unit(6, "mm"))
#Set directory to where you want plots to be saved
ggsave(filename = "cpch_qqplot_all.png",
plot = alltogether, path = 'Plots',
bg = 'white', height = 7, width = 24)
source("~/Documents/Research/minmax/cpch/validity/valid_plotting.R")
library(ggplot2)
library(dplyr)
library(readr)
setwd("~/Desktop/cpch/validity")
library(ggplot2)
library(dplyr)
library(readr)
setwd("Desktop/cpch/validity")
setwd("~/Desktop/cpch/validity")
setwd("~/Desktop")
setwd("~/Desktop/cpch")
setwd("~/Desktop/cpch/validity")
setwd("~/Desktop/cpch")
setwd("~/Desktop/cpch/reproducibility/validity")
ks_2_2 = read.csv('Data/ks_df_m_2_r_2.csv')
methods22 = c(rep('Fisher', nrow(ks_2_2)), rep('Simes', nrow(ks_2_2)), rep('Bonferroni', nrow(ks_2_2)))
ks22 = c(ks_2_2$ks_f,  ks_2_2$ks_s, ks_2_2$ks_b)
ks_3_2 = read.csv('Data/ks_df_m_2_r_2.csv')
ks_2_2 = read.csv('Data/ks_df_m_2_r_2.csv')
methods22 = c(rep('Fisher', nrow(ks_2_2)), rep('Simes', nrow(ks_2_2)), rep('Bonferroni', nrow(ks_2_2)))
methods32 = c(rep('Fisher', nrow(ks_3_2)), rep('Simes', nrow(ks_3_2)), rep('Bonferroni', nrow(ks_3_2)))
ks22 = c(ks_2_2$ks_f,  ks_2_2$ks_s, ks_2_2$ks_b)
ks32 = c(ks_3_2$ks_f,  ks_3_2$ks_s, ks_3_2$ks_b)
ks_df = data.frame(config = c(rep('m = 2, r = 2', length(ks22)), rep('m = 3, r = 2', length(ks32))),
Method = c(methods22, methods32),
nonzero_mu = rep(seq(0, 4, 0.2), 2),
ks = c(ks22, ks32)
)
ks_plot = ggplot(ks_df, aes(x = nonzero_mu, y = ks, color = Method)) +
geom_line(size = 1) + ylim(c(0, max(0.2))) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
geom_hline(aes(yintercept = mean(ks_unifs)), linetype = 2, color = 'red') +
# geom_hline(aes(yintercept = mean(ks_unifs), linetype = 'Avg K-S Distance \n between 10000 Independent Samples \n from Unif[0, 1]'), color = 'red') +
theme(legend.key.height=unit(2, "cm")) +
facet_wrap(~ config, ncol = 2) +
scale_linetype_manual(name = "", values = c(2, 2), guide = guide_legend(label = TRUE)) +
xlab(expression(theta[(m)])) + ylab('K-S Distance') + labs(color = expression(paste('Combining \n Function'))) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 22),
axis.title =element_text(size= 23), axis.text = element_text(size = 21),
legend.title=element_text(size = 21), legend.text=element_text(size=20),
panel.border = element_blank())
ggplot(ks_df, aes(x = nonzero_mu, y = ks, color = Method)) +
geom_line(size = 1) + ylim(c(0, max(0.2))) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
geom_hline(aes(yintercept = mean(ks_unifs)), linetype = 2, color = 'red') +
# geom_hline(aes(yintercept = mean(ks_unifs), linetype = 'Avg K-S Distance \n between 10000 Independent Samples \n from Unif[0, 1]'), color = 'red') +
theme(legend.key.height=unit(2, "cm")) +
facet_wrap(~ config, ncol = 2) +
scale_linetype_manual(name = "", values = c(2, 2), guide = guide_legend(label = TRUE)) +
xlab(expression(theta[(m)])) + ylab('K-S Distance') + labs(color = expression(paste('Combining \n Function'))) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 22),
axis.title =element_text(size= 23), axis.text = element_text(size = 21),
legend.title=element_text(size = 21), legend.text=element_text(size=20),
panel.border = element_blank())
#KS plots
ks_unifs = sapply(seq(1, 10000, 1), function(i){
1-ks.test(runif(10000), runif)[[1]]
}
)
ggplot(ks_df, aes(x = nonzero_mu, y = ks, color = Method)) +
geom_line(size = 1) + ylim(c(0, max(0.2))) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
geom_hline(aes(yintercept = mean(ks_unifs)), linetype = 2, color = 'red') +
# geom_hline(aes(yintercept = mean(ks_unifs), linetype = 'Avg K-S Distance \n between 10000 Independent Samples \n from Unif[0, 1]'), color = 'red') +
theme(legend.key.height=unit(2, "cm")) +
facet_wrap(~ config, ncol = 2) +
scale_linetype_manual(name = "", values = c(2, 2), guide = guide_legend(label = TRUE)) +
xlab(expression(theta[(m)])) + ylab('K-S Distance') + labs(color = expression(paste('Combining \n Function'))) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 22),
axis.title =element_text(size= 23), axis.text = element_text(size = 21),
legend.title=element_text(size = 21), legend.text=element_text(size=20),
panel.border = element_blank())
library(ggplot2)
library(dplyr)
library(readr)
setwd("~/Desktop/cpch/reproducibility/validity")
#data used to reproduce the plots in the Approximate Validity section of the paper
combined = read.csv('Data/combined_data_m_3_r_3.csv')
ks_3_2 = read.csv('Data/ks_df_m_2_r_2.csv')
ks_3_2 = read.csv('Data/ks_df_m_3_r_2.csv')
ks_2_2 = read.csv('Data/ks_df_m_2_r_2.csv')
methods22 = c(rep('Fisher', nrow(ks_2_2)), rep('Simes', nrow(ks_2_2)), rep('Bonferroni', nrow(ks_2_2)))
methods32 = c(rep('Fisher', nrow(ks_3_2)), rep('Simes', nrow(ks_3_2)), rep('Bonferroni', nrow(ks_3_2)))
ks22 = c(ks_2_2$ks_f,  ks_2_2$ks_s, ks_2_2$ks_b)
ks32 = c(ks_3_2$ks_f,  ks_3_2$ks_s, ks_3_2$ks_b)
ks_df = data.frame(config = c(rep('m = 2, r = 2', length(ks22)), rep('m = 3, r = 2', length(ks32))),
Method = c(methods22, methods32),
nonzero_mu = rep(seq(0, 4, 0.2), 2),
ks = c(ks22, ks32)
)
ks_plot = ggplot(ks_df, aes(x = nonzero_mu, y = ks, color = Method)) +
geom_line(size = 1) + ylim(c(0, max(0.2))) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
geom_hline(aes(yintercept = mean(ks_unifs)), linetype = 2, color = 'red') +
# geom_hline(aes(yintercept = mean(ks_unifs), linetype = 'Avg K-S Distance \n between 10000 Independent Samples \n from Unif[0, 1]'), color = 'red') +
theme(legend.key.height=unit(2, "cm")) +
facet_wrap(~ config, ncol = 2) +
scale_linetype_manual(name = "", values = c(2, 2), guide = guide_legend(label = TRUE)) +
xlab(expression(theta[(m)])) + ylab('K-S Distance') + labs(color = expression(paste('Combining \n Function'))) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 22),
axis.title =element_text(size= 23), axis.text = element_text(size = 21),
legend.title=element_text(size = 21), legend.text=element_text(size=20),
panel.border = element_blank())
ggplot(ks_df, aes(x = nonzero_mu, y = ks, color = Method)) +
geom_line(size = 1) + ylim(c(0, max(0.2))) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
geom_hline(aes(yintercept = mean(ks_unifs)), linetype = 2, color = 'red') +
# geom_hline(aes(yintercept = mean(ks_unifs), linetype = 'Avg K-S Distance \n between 10000 Independent Samples \n from Unif[0, 1]'), color = 'red') +
theme(legend.key.height=unit(2, "cm")) +
facet_wrap(~ config, ncol = 2) +
scale_linetype_manual(name = "", values = c(2, 2), guide = guide_legend(label = TRUE)) +
xlab(expression(theta[(m)])) + ylab('K-S Distance') + labs(color = expression(paste('Combining \n Function'))) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 22),
axis.title =element_text(size= 23), axis.text = element_text(size = 21),
legend.title=element_text(size = 21), legend.text=element_text(size=20),
panel.border = element_blank())
library(ggplot2)
library(dplyr)
library(readr)
setwd("~/Documents/Research/minmax/cpch/validity")
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
library(readr)
setwd("~/Desktop/cpch/reproducibility/validity")
#data used to reproduce the plots in the Approximate Validity section of the paper
combined = read.csv('Data/combined_data_m_3_r_3.csv')
#KS plots
ks_unifs = sapply(seq(1, 10000, 1), function(i){
1-ks.test(runif(10000), runif)[[1]]
}
)
ks_3_2 = read.csv('Data/ks_df_m_3_r_2.csv')
ks_2_2 = read.csv('Data/ks_df_m_2_r_2.csv')
methods22 = c(rep('Fisher', nrow(ks_2_2)), rep('Simes', nrow(ks_2_2)), rep('Bonferroni', nrow(ks_2_2)))
methods32 = c(rep('Fisher', nrow(ks_3_2)), rep('Simes', nrow(ks_3_2)), rep('Bonferroni', nrow(ks_3_2)))
ks22 = c(ks_2_2$ks_f,  ks_2_2$ks_s, ks_2_2$ks_b)
ks32 = c(ks_3_2$ks_f,  ks_3_2$ks_s, ks_3_2$ks_b)
ks_df = data.frame(config = c(rep('m = 2, r = 2', length(ks22)), rep('m = 3, r = 2', length(ks32))),
Method = c(methods22, methods32),
nonzero_mu = rep(seq(0, 4, 0.2), 2),
ks = c(ks22, ks32)
)
ks_plot = ggplot(ks_df, aes(x = nonzero_mu, y = ks, color = Method)) +
geom_line(size = 1) + ylim(c(0, max(0.2))) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
geom_hline(aes(yintercept = mean(ks_unifs)), linetype = 2, color = 'red') +
# geom_hline(aes(yintercept = mean(ks_unifs), linetype = 'Avg K-S Distance \n between 10000 Independent Samples \n from Unif[0, 1]'), color = 'red') +
theme(legend.key.height=unit(2, "cm")) +
facet_wrap(~ config, ncol = 2) +
scale_linetype_manual(name = "", values = c(2, 2), guide = guide_legend(label = TRUE)) +
xlab(expression(theta[(m)])) + ylab('K-S Distance') + labs(color = expression(paste('Combining \n Function'))) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 22),
axis.title =element_text(size= 23), axis.text = element_text(size = 21),
legend.title=element_text(size = 21), legend.text=element_text(size=20),
panel.border = element_blank())
ks_plot
library(ggplot2)
library(dplyr)
library(readr)
setwd("~/Desktop/cpch/reproducibility/validity")
#data used to reproduce the plots in the Approximate Validity section of the paper
combined = read.csv('Data/combined_data_m_3_r_3.csv')
#make side-by-side facet plots
get_nonzero_mu = function(mu_vec){
substring = tail(strsplit(mu_vec, split = " ")[[1]], 1)
substr(substring, 1, nchar(substring)-1)
}
ks_3_2 = read.csv('Data/ks_df_m_3_r_2.csv')
ks_2_2 = read.csv('Data/ks_df_m_2_r_2.csv')
methods22 = c(rep('Fisher', nrow(ks_2_2)), rep('Simes', nrow(ks_2_2)), rep('Bonferroni', nrow(ks_2_2)))
methods32 = c(rep('Fisher', nrow(ks_3_2)), rep('Simes', nrow(ks_3_2)), rep('Bonferroni', nrow(ks_3_2)))
ks22 = c(ks_2_2$ks_f,  ks_2_2$ks_s, ks_2_2$ks_b)
ks32 = c(ks_3_2$ks_f,  ks_3_2$ks_s, ks_3_2$ks_b)
ks_df = data.frame(config = c(rep('m = 2, r = 2', length(ks22)), rep('m = 3, r = 2', length(ks32))),
Method = c(methods22, methods32),
nonzero_mu = rep(seq(0, 4, 0.2), 2),
ks = c(ks22, ks32)
)
ks_plot = ggplot(ks_df, aes(x = nonzero_mu, y = ks, color = Method)) +
geom_line(size = 1) + ylim(c(0, max(0.2))) +
theme_light() +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.background =element_rect(fill="lightgray")) +
geom_hline(aes(yintercept = mean(ks_unifs)), linetype = 2, color = 'red') +
# geom_hline(aes(yintercept = mean(ks_unifs), linetype = 'Avg K-S Distance \n between 10000 Independent Samples \n from Unif[0, 1]'), color = 'red') +
theme(legend.key.height=unit(2, "cm")) +
facet_wrap(~ config, ncol = 2) +
scale_linetype_manual(name = "", values = c(2, 2), guide = guide_legend(label = TRUE)) +
xlab(expression(theta[(m)])) + ylab('K-S Distance') + labs(color = expression(paste('Combining \n Function'))) +
theme(aspect.ratio = 1,strip.text.x = element_text(size = 22),
axis.title =element_text(size= 23), axis.text = element_text(size = 21),
legend.title=element_text(size = 21), legend.text=element_text(size=20),
panel.border = element_blank())
ks_plot
